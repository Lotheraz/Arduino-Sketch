// Define pins for electromagnets controlling the valves
const int electromagnetPin1 = 22;  // Pin for electromagnet controlling valve 1
const int electromagnetPin2 = 23;  // Pin for electromagnet controlling valve 2
const int electromagnetPin3 = 24;  // Pin for electromagnet controlling valve 3
const int electromagnetPin4 = 25;  // Pin for electromagnet controlling valve 4
const int electromagnetPin5 = 26;  // Pin for electromagnet controlling valve 5
const int electromagnetPin6 = 27;  // Pin for electromagnet controlling valve 6
const int electromagnetPin7 = 28;  // Pin for electromagnet controlling valve 7 (Corrected comment from valve 8)
const int electromagnetPin8 = 29;  // Pin for electromagnet controlling valve 8 (Corrected comment from valve 9)
const int electromagnetPin9 = 30;  // Pin for electromagnet controlling valve 9 (Corrected comment from valve 10)
const int sensorDigitalPin = 31;   // pin for sensor of pump (Corrected spelling)

//Stepper Motor 1
const int SM1_dirPin = 33;         // pin for direction of pump
const int SM1_stepPin = 12;        // pin movement of pump
const int SM1_enPin = 11;          // pin for high or low step motor

//Stepper Motor 2
const int SM2_dirPin = 10;
const int SM2_stepPin = 9;
const int SM2_enPin = 8;

//Stepper Motor 3
const int SM3_dirPin = 7;
const int SM3_stepPin = 6;
const int SM3_enPin = 5;

//Stepper Motor 4
const int SM4_dirPin = 4;
const int SM4_stepPin = 3;
const int SM4_enPin = 2;

bool motorMoving1 = false;
bool pump1Pushing = true; // true for pushing, false for sucking

// Global variables for stepper motor 2 (Up and Down control)
bool motorMoving2 = false; // Indicates whether stepper motor 2 is moving
bool directionUp2 = true; // Direction control for stepper motor 2
// Global variables for stepper motor 3 (Pump 2 control)
bool motorMoving3 = false;
bool pump2Pushing = true; // true for pushing, false for sucking
// Global variables for stepper motor 4 (Left and Right control)
bool motorMoving4 = false; // Indicates whether stepper motor 4 is moving
bool directionLeft4 = true; // Direction control for stepper motor 4

const int lm35Pin = A0; // Angi analog pinne som sensoren er koblet til

void setup() {
  // Set electromagnet pins as output pins
  pinMode(electromagnetPin1, OUTPUT);
  pinMode(electromagnetPin2, OUTPUT);
  pinMode(electromagnetPin3, OUTPUT);
  pinMode(electromagnetPin4, OUTPUT);
  pinMode(electromagnetPin5, OUTPUT);
  pinMode(electromagnetPin6, OUTPUT);
  pinMode(electromagnetPin7, OUTPUT);
  pinMode(electromagnetPin8, OUTPUT);
  pinMode(electromagnetPin9, OUTPUT);

  Serial.begin(9600); // Initialize serial communication

  //Step Motor1 output pins
  pinMode(SM1_stepPin, OUTPUT);
  pinMode(SM1_dirPin, OUTPUT);
  pinMode(SM1_enPin, OUTPUT);
  digitalWrite(SM1_enPin, LOW); // Enable the motor

  //Step Motor2 output pins
  pinMode(SM2_stepPin, OUTPUT);
  pinMode(SM2_dirPin, OUTPUT);
  pinMode(SM2_enPin, OUTPUT);
  digitalWrite(SM2_enPin, LOW); // Enable the motor

  //Step Motor3 output pins
  pinMode(SM3_stepPin, OUTPUT);
  pinMode(SM3_dirPin, OUTPUT);
  pinMode(SM3_enPin, OUTPUT);
  digitalWrite(SM3_enPin, LOW); // Enable the motor

  //Step Motor4 output pins
  pinMode(SM4_stepPin, OUTPUT);
  pinMode(SM4_dirPin, OUTPUT);
  pinMode(SM4_enPin, OUTPUT);
  digitalWrite(SM4_enPin, LOW); // Enable the motor



}

 

void loop() {
  int sensorValue = analogRead(lm35Pin);
  float milliVolts = (sensorValue / 1023.0) * 5000; // convert to millivolts
  float temperatureC = milliVolts / 10.0;
  Serial.print(temperatureC);
  Serial.println(" Â°C");

  if (Serial.available() > 0) {
    String receivedString = Serial.readStringUntil('\n');
    receivedString.trim(); // Remove any whitespace or newline characters

    // Check if the received string can be converted to an integer (i.e., check if it's a step command)
    int selectedStep = receivedString.toInt(); // Try to convert to integer
    if (selectedStep > 0 && receivedString.length() == String(selectedStep).length()) {
      // It's a valid step command
      executeStep(selectedStep);
    } else {
      // It's a regular command
      static String lastCommand = ""; // Store the last command received
      if (receivedString != lastCommand) {
        lastCommand = receivedString; // Update last command

        if (receivedString == "Open_All_Valves") {
          openAllValves();
          delay(100000);
        } else if (receivedString == "Close_All_Valves") {
          closeAllValves();
        } else if (receivedString.startsWith("Mag") && receivedString.length() > 5) {
          int valveNumber = receivedString.substring(3, 4).toInt(); // Extract the valve number
          if (receivedString.endsWith("_ON")) {
            openValve(valveNumber);
          } else if (receivedString.endsWith("_OFF")) {
            closeValve(valveNumber);
          }
        } else if (receivedString == "Pump1_On_Push" || receivedString == "Pump1_On_Suck") {
          motorMoving1 = !motorMoving1;
          pump1Pushing = receivedString == "Pump1_On_Push";
        } else if (receivedString == "Pump2_On_Push" || receivedString == "Pump2_On_Suck") {
          motorMoving3 = !motorMoving3;
          pump2Pushing = receivedString == "Pump2_On_Push";
        } else if (receivedString == "MoveUp" || receivedString == "MoveDown") {
          motorMoving2 = !motorMoving2;
          directionUp2 = receivedString == "MoveUp";
        } else if (receivedString == "MoveLeft" || receivedString == "MoveRight") {
          motorMoving4 = !motorMoving4;
          directionLeft4 = receivedString == "MoveRight";
        }
      }
    }
  }

  // Update stepper motors status
  if (motorMoving1) {
    continuousMoveMotor(SM1_dirPin, SM1_stepPin, pump1Pushing, motorMoving1);
  }
  if (motorMoving3) {
    continuousMoveMotor(SM3_dirPin, SM3_stepPin, pump2Pushing, motorMoving3);
  }
  if (motorMoving2) {
    continuousMoveMotor(SM2_dirPin, SM2_stepPin, directionUp2, motorMoving2);
  }
  if (motorMoving4) {
    continuousMoveMotor(SM4_dirPin, SM4_stepPin, !directionLeft4, motorMoving4);
  }
}


void continuousMoveMotor(int dirPin, int stepPin, bool direction, bool &motorMoving) {
    digitalWrite(dirPin, direction ? HIGH : LOW); // Set direction based on boolean value
    while (motorMoving && Serial.available() == 0) {
        digitalWrite(stepPin, HIGH);
        delayMicroseconds(1000); // Speed control
        digitalWrite(stepPin, LOW);
        delayMicroseconds(1000); // Speed control
        // Optionally add code here to check for new Serial commands within the movement loop
    }
      // Les spenningsverdien fra sensoren

}

void openAllValves() { //Open all valves
  digitalWrite(electromagnetPin1, HIGH);
  digitalWrite(electromagnetPin2, HIGH);
  digitalWrite(electromagnetPin3, HIGH);
  digitalWrite(electromagnetPin4, HIGH);
  digitalWrite(electromagnetPin5, HIGH);
  digitalWrite(electromagnetPin6, HIGH);
  digitalWrite(electromagnetPin7, HIGH);
  digitalWrite(electromagnetPin8, HIGH);
  digitalWrite(electromagnetPin9, HIGH);
  delay(10000);
}


void closeAllValves() {
  digitalWrite(electromagnetPin1, LOW);
  digitalWrite(electromagnetPin2, LOW);
  digitalWrite(electromagnetPin3, LOW);
  digitalWrite(electromagnetPin4, LOW);
  digitalWrite(electromagnetPin5, LOW);
  digitalWrite(electromagnetPin6, LOW);
  digitalWrite(electromagnetPin7, LOW);
  digitalWrite(electromagnetPin8, LOW);
  digitalWrite(electromagnetPin9, LOW);
}

// Function to open a specific valve
void openValve(int valveNumber) {
  digitalWrite(getElectromagnetPin(valveNumber), HIGH); // Turn on electromagnet to open the valve
}

// Function to close a specific valve
void closeValve(int valveNumber) {
  digitalWrite(getElectromagnetPin(valveNumber), LOW); // Turn off electromagnet to close the valve
}
// Function to get the pin number of a specific electromagnet based on valve number
int getElectromagnetPin(int valveNumber) {
  switch(valveNumber) {
    case 1: return electromagnetPin1;
    case 2: return electromagnetPin2;
    case 3: return electromagnetPin3;
    case 4: return electromagnetPin4;
    case 5: return electromagnetPin5;
    case 6: return electromagnetPin6;
    case 7: return electromagnetPin7;
    case 8: return electromagnetPin8;
    case 9: return electromagnetPin9;
    default: return -1; // Invalid valve number
  }
}

void executeStep(int stepNumber) {
  switch (stepNumber) {
    case 1:
      step2();
      step3();
      step4();
      step5();
      step6();
      step7();
      step8();
      step9();
      step10();
      step11();
      step12();
      step13();
      step14();
      step15();
      step16();
      step17();
      step18();
      step19();
      step20();
      step21();
      step22();
      break;      
    case 2:
      step2();
      break;
    case 3:
      step3();
      break;
    case 4:
      step4();
      break;
    case 5:
      step5();
      break;
    case 6:
      step6();
      break;
    case 7:
      step7();
      break;    
    case 8:
      step8();
      break;
    case 9:
      step9();
      break;
    case 10:
      step10();
      break;
    case 11:
      step11();
      break;
    case 12:
      step12();
      break;
    case 13:
      step13();
      break;
    case 14:
      step14();
      break;
    case 15:
      step15();
      break;
    case 16:
      step16();
      break;
    case 17:
      step17();
      break;
    case 18:
      step18();
      break;
    case 19:
      step19();
      break;
    case 20:
      step20();
      break;
    case 21:
      step21();
      break;
    case 22:
      step22();
      break;      
  }
}

// Define functions for each step

void step2() {
  closeAllValves(); // Close all valves
  openValve(4); // Open valve 4
  delay(10000); // Wait for 60 seconds
  closeValve(4); // Close valve 4
}

void step3() {
  closeAllValves(); // Close all valves
  delay(20000); // Wait for 20 seconds
  //In this step 3 also turn off both pumps
}
void step4 () {
  closeAllValves(); // Close all valves
  openValve(5); //open valve 5
  openValve(6); //open valve 6
  delay(10000); // Wait for 10 seconds
  closeValve(5); // close valve 5
  closeValve(6); // close valve 6
  // step 4 :pump1 is off pump2 is ON push
}
void step5 () {
  closeAllValves(); // Close all valves
  openValve(1); //open valve 1
  delay(10000); // Wait for 10 seconds
  closeValve(1); // close valve 1
  //in this step pump1 is off and pump2 is on suck
}
void step6 () {
  closeAllValves(); //Close all valves
  delay(120000); // Wait for 120 seconds
  // step 6 :turn off both pumps
}
void step7 () {
  closeAllValves(); // Close all valves
  openValve(5); //open valve 5
  openValve(6); //open valve 6
  delay(5000); // Wait for 5 seconds
  closeValve(5); // close valve 5
  closeValve(6); // close valve 6
  // step 7 :pump 1 is off and turn on push
}
void step8 () {
  closeAllValves(); // Close all valves
  openValve(2); //open valve 2
  delay(10000); // Wait for 10 seconds
  closeValve(2); // close valve 2
  //in this step8 : pump 1 is off and pump2 on-suck
}
void step9 () {
  closeAllValves(); // Close all valves
  delay(60000); // Wait for 60 seconds
  // Step 9 :turn off both pumps
}
void step10 () {
  closeAllValves(); // Close all valves
  openValve(5); //open valve 5
  openValve(6); //open valve 6
  delay(5000); // Wait for 5 seconds
  closeValve(5); // close valve 5
  closeValve(6); // close valve 6
  // Step 10 :pump 1 is off and turn on push
}
void step11 () {
  closeAllValves(); // Close all valves
  openValve(3); //open valve 3
  delay(10000); // Wait for 10 seconds
  closeValve(3); // close valve 3
  //in this step11 : pump 1 is off and pump2 on-suck
}
void step12 () {
  closeAllValves(); // Close all valves
  delay(20000); // Wait for 20 seconds
  // step 12 :turn off both pumps
}
void step13 () {
  closeAllValves(); // Close all valves
  openValve(5); //open valve 5
  openValve(6); //open valve 6
  delay(5000); // Wait for 5 seconds
  closeValve(5); // close valve 5
  closeValve(6); // close valve 6
  // step 13 :pump 1 is off and turn on push
}
void step14 () {
  closeAllValves(); // Close all valves
  delay(5000); // Wait for 5 seconds
  //in this step14 : pump 1 is off and pump2 on-suck
}
void step15 () {
  closeAllValves(); // Close all valves
  openValve(9); //open valve 9
  delay(10000); // Wait for 10 seconds
  closeValve(9); // close valve 9
  //in this step15 : pump 1 is off and pump2 on-suck
}
void step16 () {
  closeAllValves(); // Close all valves
  openValve(5); //open valve 5
  openValve(9); //open valve 9
  delay(15000); // Wait for 15 seconds
  closeValve(5); // close valve 5
  closeValve(9); // close valve 9
  // step 16 :pump 1 is on-suck and turn off pump2
}
void step17 () {
  closeAllValves(); // Close all valves
  delay(5000); // Wait for 5 seconds
  //In this step 17: turn off both pumps
}
void step18 () {
  closeAllValves(); // Close all valves
  openValve(8); //open valve 8
  delay(1000); // Wait for 1 seconds
  closeValve(8); // close valve 8
  // step 18: pump 1 is on-suck and pump2 is on push
}
void step19 () {
  closeAllValves(); // Close all valves
  openValve(8); //open valve 8
  delay(20000); // Wait for 20 seconds
  closeValve(8); // close valve 8
  //In this step 19: pump 1 on push and pump2 off
}
void step20 () {
  closeAllValves(); // Close all valves
  delay(100000); // Wait for 100 seconds
  // step 20: both pumps turn off
}
void step21 () {
  closeAllValves(); // Close all valves
  openValve(8); //open valve 8
  delay(1000); // Wait for  seconds ** time is not mention in sheet
  closeValve(8); // close valve 8
  // Step 21: pump1 is on suck and pump2 is on push
}
void step22 () {
  closeAllValves(); // Close all valves
  // for time delay--repeat this step for 30 to 120 minutes
  // Step 22: turn off both pumps
}
